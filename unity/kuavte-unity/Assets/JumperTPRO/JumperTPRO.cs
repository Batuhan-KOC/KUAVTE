//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/JumperTPRO/JumperTPRO.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JumperTPRO: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JumperTPRO()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JumperTPRO"",
    ""maps"": [
        {
            ""name"": ""JumperTPROAction"",
            ""id"": ""a8f23881-ebcf-4b22-aa96-618ff8a84e01"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""1ca6b095-5095-4706-a263-56c907a89e72"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""0333b051-7ec5-488c-9c91-6d96c4730adc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""03c5f646-6075-4106-93c6-1b33332d71d7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""839b07cd-0178-4ed5-8826-1548b980b5ce"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8225b8be-2527-48da-958c-1c6861e2eba2"",
                    ""path"": ""<HID::EdgeTX Jumper TPro V2 Joystick>/z"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1,zero=-1)"",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dcddd4d-2474-4c35-9f6a-105b1f2fc68a"",
                    ""path"": ""<HID::EdgeTX Jumper TPro V2 Joystick>/rx"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09050bc2-1426-40ab-bf20-ecacdd959606"",
                    ""path"": ""<HID::EdgeTX Jumper TPro V2 Joystick>/stick/y"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5648144e-e81c-4ee5-aa9f-950894e50fa2"",
                    ""path"": ""<HID::EdgeTX Jumper TPro V2 Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // JumperTPROAction
        m_JumperTPROAction = asset.FindActionMap("JumperTPROAction", throwIfNotFound: true);
        m_JumperTPROAction_Throttle = m_JumperTPROAction.FindAction("Throttle", throwIfNotFound: true);
        m_JumperTPROAction_Yaw = m_JumperTPROAction.FindAction("Yaw", throwIfNotFound: true);
        m_JumperTPROAction_Pitch = m_JumperTPROAction.FindAction("Pitch", throwIfNotFound: true);
        m_JumperTPROAction_Roll = m_JumperTPROAction.FindAction("Roll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // JumperTPROAction
    private readonly InputActionMap m_JumperTPROAction;
    private List<IJumperTPROActionActions> m_JumperTPROActionActionsCallbackInterfaces = new List<IJumperTPROActionActions>();
    private readonly InputAction m_JumperTPROAction_Throttle;
    private readonly InputAction m_JumperTPROAction_Yaw;
    private readonly InputAction m_JumperTPROAction_Pitch;
    private readonly InputAction m_JumperTPROAction_Roll;
    public struct JumperTPROActionActions
    {
        private @JumperTPRO m_Wrapper;
        public JumperTPROActionActions(@JumperTPRO wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_JumperTPROAction_Throttle;
        public InputAction @Yaw => m_Wrapper.m_JumperTPROAction_Yaw;
        public InputAction @Pitch => m_Wrapper.m_JumperTPROAction_Pitch;
        public InputAction @Roll => m_Wrapper.m_JumperTPROAction_Roll;
        public InputActionMap Get() { return m_Wrapper.m_JumperTPROAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumperTPROActionActions set) { return set.Get(); }
        public void AddCallbacks(IJumperTPROActionActions instance)
        {
            if (instance == null || m_Wrapper.m_JumperTPROActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JumperTPROActionActionsCallbackInterfaces.Add(instance);
            @Throttle.started += instance.OnThrottle;
            @Throttle.performed += instance.OnThrottle;
            @Throttle.canceled += instance.OnThrottle;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
        }

        private void UnregisterCallbacks(IJumperTPROActionActions instance)
        {
            @Throttle.started -= instance.OnThrottle;
            @Throttle.performed -= instance.OnThrottle;
            @Throttle.canceled -= instance.OnThrottle;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
        }

        public void RemoveCallbacks(IJumperTPROActionActions instance)
        {
            if (m_Wrapper.m_JumperTPROActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJumperTPROActionActions instance)
        {
            foreach (var item in m_Wrapper.m_JumperTPROActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JumperTPROActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JumperTPROActionActions @JumperTPROAction => new JumperTPROActionActions(this);
    public interface IJumperTPROActionActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
    }
}
